import random

class ece_radio_receivers_section_1_1():
	def __init__(self):
		
		choice_a = 'its resistance value'
		choice_b = 'its operating temperature #'
		choice_c = 'both its resistance and operating temperature'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The noise generated by a resistor depends upon"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_2():
	def __init__(self):
		
		choice_a = 'the IF stage has better selectivity than the RF stage #'
		choice_b = 'the RF stage has better selectivity than the IF stage'
		choice_c = 'the RF and IF stages have the same selectivity'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a superheterodyne receiver """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_3():
	def __init__(self):
		
		choice_a = 'rectify the input signal'
		choice_b = 'discard the carrier'
		choice_c = 'provide audio signal'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The function of an AM detector circuit is to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_4():
	def __init__(self):
		
		choice_a = 'variable selectivity'
		choice_b = 'variable sensitivity #'
		choice_c = 'double conversion'
		choice_d = 'squelch'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following should be used in order to prevent overloading of the last IF amplifier in a receiver?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_5():
	def __init__(self):
		
		choice_a = '433 kHz'
		choice_b = '455 kHz #'
		choice_c = '545 kHz'
		choice_d = '555 kHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Most popular IF for receivers tuning from 540 to 1650 kHz is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_6():
	def __init__(self):
		
		choice_a = 'the local oscillator operates below the signal frequency'
		choice_b = 'local oscillator frequency is normally double the IF'
		choice_c = 'RF amplifier normally works at frequencies above the carrier frequency'
		choice_d = 'mixer input must be tuned to the signal frequency #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a broadcast superheterodyne receiver"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_7():
	def __init__(self):
		
		choice_a = 'feed more than one receiver from a single antenna'
		choice_b = 'connect two transmitters to the same antenna'
		choice_c = 'connect a receiver and a transmitter to the same antenna #'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A duplexer is a device used to """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_8():
	def __init__(self):
		
		choice_a = 'modulator'
		choice_b = 'mixer #'
		choice_c = 'demodulator'
		choice_d = 'frequency translator'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A heterodyne frequency changer is called a"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_9():
	def __init__(self):
		
		choice_a = 'improved image frequency rejection'
		choice_b = 'improved rejection of adjacent unwanted signals'
		choice_c = 'prevention of re-radiation of the local oscillator through the antenna of the receiver'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""RF amplifiers are used in radio receivers for"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_10():
	def __init__(self):
		
		choice_a = 'higher at low frequencies and lower at high frequencies'
		choice_b = 'low at high and low frequencies and max at the midrange frequencies'
		choice_c = 'relatively uniform at all frequencies #'
		choice_d = 'low at lower frequencies and higher at higher frequencies'		
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The sensitivity curve of a standard receiver is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_11():
	def __init__(self):
		
		choice_a = '30, 60 and, 70 kHz'
		choice_b = '3, 6, and 7 kHz'
		choice_c = '30, 60, and 70 MHz #'
		choice_d = '3, 6, and 7 GHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which are the popular IF frequencies for microwave and radar receivers operating on frequencies in the range 1 to 10 GHz?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_12():
	def __init__(self):
		
		choice_a = 'the linearity is worse than in a phase discriminator #'
		choice_b = 'the output is twice that obtainable from a similar phase discriminator'
		choice_c = 'stabilization against signal strength variations is provided'
		choice_d = 'the circuit is the same as in a discriminator, except that the diodes are reversed'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a ratio detector"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_13():
	def __init__(self):
		
		choice_a = 'stop oscillation #'
		choice_b = 'increase bandwidth'
		choice_c = 'improve selectivity'
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Neutralization is used in RF amplifiers to """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_14():
	def __init__(self):
		
		choice_a = 'fs - 2 fi'
		choice_b = 'fs + 2 fi #'
		choice_c = '(fs + fi) / 2'
		choice_d = '(fs - fi) / 2'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""If the signal frequency is (fs) and the intermediate frequency is (fi), the image frequency is given by	"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_15():
	def __init__(self):
		
		choice_a = 'will increase'
		choice_b = 'will decrease #'
		choice_c = 'will remain constant'
		choice_d = 'will reduce to a negligible value'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""It is known that noise phase modulates the FM wave. As the noise side band frequency approaches the carrier frequency, the noise amplitude will"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_16():
	def __init__(self):
		
		choice_a = 'demodulator #'
		choice_b = 'loudspeaker'
		choice_c = 'audio amplifier'
		choice_d = 'frequency changer'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a receiver, which of the following devices has IF input by no RF output?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_17():
	def __init__(self):
		
		choice_a = 'Resistance noise'
		choice_b = 'Partition noise #'
		choice_c = 'Flicker noise'
		choice_d = 'Shot noise'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Transistors are free from which type of noise?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_18():
	def __init__(self):
		
		choice_a = 'MF #'
		choice_b = 'HF'
		choice_c = 'VHF'
		choice_d = 'UHF'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Standard AM radio broadcasts are confined to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_19():
	def __init__(self):
		
		choice_a = 'the highest AGC voltage is produced between stations'
		choice_b = 'the faster the AGC time constant, the more accurate the output'
		choice_c = 'an increase in signal strength produces more AGC #'
		choice_d = 'the audio stage gain is normally controlled by the AGC'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver with simple AGC"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_20():
	def __init__(self):
		
		choice_a = 'Complete phase-shift generator'
		choice_b = 'Product Detector'
		choice_c = 'Diode Balanced Modulator'
		choice_d = 'Bipolar Transistor Balanced Modulator #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following cannot be used to demodulate SSB?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_21():
	def __init__(self):
		
		choice_a = 'carrier frequencies'
		choice_b = 'audio frequencies'
		choice_c = 'radio frequencies #'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A transmitter serial current contains"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_22():
	def __init__(self):
		
		choice_a = '24.09 MHz'
		choice_b = '24.54 MHz'
		choice_c = '25.45 MHz'
		choice_d = '25.91 MHz #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a broadcast superheterodyne receiver having no RF amplifier, the loaded Q of the antenna coupling circuit is 100. If the intermediate frequency is 455 kHz, the image frequency at 25 MHz willl be"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_23():
	def __init__(self):
		
		choice_a = 'at the transmitter'
		choice_b = 'in the channel #'
		choice_c = 'at the information source'
		choice_d = 'at the destination'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a communication system, noise is likely to affect the signal"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_24():
	def __init__(self):
		
		choice_a = 'absolute temperature #'
		choice_b = '(absolute temperature)^2'
		choice_c = '1 / (abosolute temperature)'
		choice_d = '1/ sqrt(absolute temperature)'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The noise produced by a resistor is proportional to """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_25():
	def __init__(self):
		
		choice_a = 'selectivity will be poor #'
		choice_b = 'tracking difficulties will be least'
		choice_c = 'adjacent channel rejection will improve'
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver, if the intermediate frequency is too high"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_26():
	def __init__(self):
		
		choice_a = '1655 kHz'
		choice_b = '2110 kHz #'
		choice_c = '745 kHz'
		choice_d = '910 kHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a superheterodyne receiver, the IF is 455 kHz. If it is tuned to 1200 kHz, the image frequency will be at"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_27():
	def __init__(self):
		
		choice_a = 'sensitivity'
		choice_b = 'characteristics of the IF section #'
		choice_c = 'antenna direction '
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The selectivity of most receiverse is determined largely by"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_28():
	def __init__(self):
		
		choice_a = '750 kHz'
		choice_b = '990 kHz'
		choice_c = '1650 kHz'
		choice_d = '2100 kHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a superheterodyne receiver with an IF of 450 kHz is tuned to a signal at 1200 kHz. The image frequency is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_29():
	def __init__(self):
		
		choice_a = '1.116 #'
		choice_b = '1.386'
		choice_c = '2.116'
		choice_d = '2.386'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a broadcast superheterodyne receiver having no RF amplifierm the loaded Q of the antenna coupling circuit is 100. If the intermediate frequency is 455 kHz, the rejection ratio at 25 MHz will be"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_1_31():
	def __init__(self):
		
		choice_a = 'high gain and high sensitivity #'
		choice_b = 'better selectivity at higher frequencies'
		choice_c = 'stability'
		choice_d = 'noise suppression'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""As compared to tuned radio frequency receivers which of the following is the advantage of using superheterodyne receivers?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_32():
	def __init__(self):
		
		choice_a = 'Image frequency rejection will improve'
		choice_b = 'selectivity will be too sharp #'
		choice_c = 'the frequency selectivity of the local oscillator will have to be lowered'
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver, if the intermediate frequency is too low"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_33():
	def __init__(self):
		
		choice_a = 'discard the carrier'
		choice_b = 'facilitate tracking #'
		choice_c = 'filter the input signal'
		choice_d = 'suppress noise'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Padders are used in a receiver to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_34():
	def __init__(self):
		
		choice_a = 'lower than the incoming frequency'
		choice_b = 'higher than the incoming frequency #'
		choice_c = 'equal to the incoming frequency'
		choice_d = 'any of the situations'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver, the local oscillator is tuned to a frequency """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_35():
	def __init__(self):
		
		choice_a = 'colpitts'
		choice_b = 'clapp'
		choice_c = 'armstrong #'
		choice_d = 'ultra'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following oscillator is generally not used at VHF?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_36():
	def __init__(self):
		
		choice_a = '114 kohms'
		choice_b = '336 kohms #'
		choice_c = '384 kohms'
		choice_d = '455 kohms'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""An unmodulated voltage 10 V effective is applied to a diode detector in which load resistance is 4e-5 ohms. A micrometer shows that the rectified DC current in this resistance is 30 A. The input resistance of the detector is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_1_37():
	def __init__(self):
		
		choice_a = 'DC voltage'
		choice_b = 'modulating signal'
		choice_c = 'RF ripple'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The output of a diode detector contains"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_38():
	def __init__(self):
		
		choice_a = 'partition noise #'
		choice_b = 'shot noise'
		choice_c = 'flicker noise'
		choice_d = 'resistance noise'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following noise does not occue in transistors?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_1_39():
	def __init__(self):
		
		choice_a = 'partition noise'
		choice_b = 'white noise'
		choice_c = 'thermal noise #'
		choice_d = 'shot noise'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Noise generated in a resistor is also known as """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_40():
	def __init__(self):
		
		choice_a = 'variable tuning inductor'
		choice_b = 'ganged tuning inductor #'
		choice_c = 'variable capacitor'
		choice_d = 'variable preset'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following is used to provide tracking between RF amplifier and local oscillator stages of a receiver?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_41():
	def __init__(self):
		
		choice_a = 'its ability to reject unwanted signals #'
		choice_b = 'its ability to amplify weak signals'
		choice_c = 'the frequency at which it gives maximum amplification to signal'
		choice_d = 'its ability to suppress noise'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The selectivity of a radio receiver is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_42():
	def __init__(self):
		
		choice_a = 'unsuitability will occur'
		choice_b = 'heterodyne whistles will be heard'
		choice_c = 'tuning to the frequency band immediately adjacent to the intermediate frequency will become impossible'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""If the intermediate frequency of a superheterodyne falls within the tuning range of the receiver"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_43():
	def __init__(self):
		
		choice_a = 'audio amplifiers'
		choice_b = 'RF amplifier'
		choice_c = 'full wave rectifier'
		choice_d = 'magic eye #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""EM 84 tube is used in radio receivers as"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_1_44():
	def __init__(self):
		
		choice_a = 'Double conversion is used to improve image rejection'
		choice_b = 'Double conversion is used to improve selectivity'
		choice_c = 'Variable sensitivity is used to improve selectivity'
		choice_d = 'Variable sensitivity is used to eliminate selective fading #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following statements about receivers is false?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_45():
	def __init__(self):
		
		choice_a = 'increasese with modulating signal power'
		choice_b = 'decreases with modulating signal power'
		choice_c = 'is independent of the modulating signal power #'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Modulated carrier power in FM"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_46():
	def __init__(self):
		
		choice_a = 'detect the modulating signal'
		choice_b = 'amplify the received modulated carrier '
		choice_c = 'shift the frequency of the received modulated carrier to the IF band #'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In superheterodyne receiversm the local oscillator is used to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_47():
	def __init__(self):
		
		choice_a = 'demodulator'
		choice_b = 'AGC'
		choice_c = 'IF amplifier #'
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following is the same in AM and FM receivers?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_48():
	def __init__(self):
		
		choice_a = 'reduce receiver gain at some specific frequency #'
		choice_b = 'increase receiver gain at some specific frequency'
		choice_c = 'make selectivity more precise'
		choice_d = 'spread the bandwidth'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A notch filter is sometimes used in communication receivers to """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_49():
	def __init__(self):
		
		choice_a = 'noise figure'
		choice_b = 'noise temperature'
		choice_c = 'input noise voltage #	' 
		choice_d = 'equivalent noise resistance'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which one ot the following is not a useful quantity for comparing the noise performance of receivers?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_1_50():
	def __init__(self):
		
		choice_a = 'leak type bias must be used'
		choice_b = 'output must be tuned'
		choice_c = 'the circuit is always biased in class C, by virtue of leak type bias #'
		choice_d = 'when the input increases past the threshold of limiting, the gain decreases to keep the output constant'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following statements about the limiter is not valid?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_1():
	def __init__(self):
		
		choice_a = 'reduce interfering noise due to ignition system'
		choice_b = 'reduce noise due to electrical storms'
		choice_c = 'reduce interference due to electrical machinery'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Noise limiter is provided on AM receivers to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_2():
	def __init__(self):
		
		choice_a = 'diagonal clipping'
		choice_b = 'poor AGC operation'
		choice_c = 'poor AF response'
		choice_d = 'negative peak clipping #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A low ratio of athe AC load impedance of a diode detector results in"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_3():
	def __init__(self):
		
		choice_a = 'insulator'
		choice_b = 'inductor'
		choice_c = 'capacitor #'
		choice_d = 'variable resistor'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A trimmer is basically a """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_4():
	def __init__(self):
		
		choice_a = 'all stages contribute equally to noise'
		choice_b = 'RF stage has no effect on S/N ratio'
		choice_c = 'mixer stage contributes most of the noise generated #'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_5():
	def __init__(self):
		
		choice_a = 'highest at the midrange frequency and lower at other frequency #'
		choice_b = 'lower at midrange and higher at the low and high frequencies'
		choice_c = 'relatively uniform at all frequencies'
		choice_d = 'very high at extremes at very low midrange frequencies'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which curve represents the fidelity curve of a standard receiver?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_6():
	def __init__(self):
		
		choice_a = 'the gain IF amplifier'
		choice_b = 'the gain of RF amplifier'
		choice_c = 'the noise figure'
		choice_d = 'all of the above #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The sensitivity of a superheterodyne receiver is determined by"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_7():
	def __init__(self):
		
		choice_a = 'the local oscillator frequency is made higher than the incoming signal frequency #'
		choice_b = 'the local oscillator frequency is made lower than the incoming signal frequency'
		choice_c = 'the local oscillator frequency is made equal to the incoming signal frequency'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_8():
	def __init__(self):
		
		choice_a = 'mixer stage'
		choice_b = 'power supply'
		choice_c = 'power supply #'
		choice_d = 'equally from above three'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver, the maximum contribution to noise if from"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_9():
	def __init__(self):
		
		choice_a = 'is constant with frequency #'
		choice_b = 'increases with frequency'
		choice_c = 'decreases with frequency'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Power spectral density of white noise"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_10():
	def __init__(self):
		
		choice_a = 'four times the modulating frequency'
		choice_b = 'twice the modulating frequency'
		choice_c = 'half the modulating frequency #'
		choice_d = 'modulating frequency'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a FM waveform, the side bands are spaced at intervals equal to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_11():
	def __init__(self):
		
		choice_a = '5870'
		choice_b = '3655'
		choice_c = '236 #'
		choice_d = '13.3'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A receiver having an RF amplifier and an IF of 450 kHz, has Q of the coils 65 and an incoming frequency 1200 kHz, the image rejection of the receiver is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_12():
	def __init__(self):
		
		choice_a = 'insulator'
		choice_b = 'variable resistance'
		choice_c = 'capacitor'
		choice_d = 'inductor #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A padder is basically a/an"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_13():
	def __init__(self):
		
		choice_a = 'facilitate tracking'
		choice_b = 'allow permit adequate frequency coverage without switching #'
		choice_c = 'facilitate image frequency rejection'
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a radio receiver, the local oscillator is always tuned to a frequency higher than the incoming frequency to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_14():
	def __init__(self):
		
		choice_a = '555 kHz'
		choice_b = '1010 kHz'
		choice_c = '1465 kHz #'
		choice_d = '1920 kHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""When a superheterodyne receiver is tuned to 455 kHz, its local oscillator provides a mixer with the input at 1010 kHz. The image frequency is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_2_15():
	def __init__(self):
		
		choice_a = '1010 kHz'
		choice_b = '1455 kHz'
		choice_c = '1910 kHz #'
		choice_d = '545 kHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a broadcast superheterodyne receiver having no RF amplifier, the loaded Q of the antenna coupling circuit is 100. If the intermediate frequency is 455 kHz, the image frequency at 1000 kHz will be"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_16():
	def __init__(self):
		
		choice_a = 'of higher frequency'
		choice_b = 'of lower frequency'
		choice_c = 'of high L/C ratio'
		choice_d = 'of constant passband #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a superheterodyne receiver , the IF stage has better selectivity than the RF stage because"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_17():
	def __init__(self):
		
		choice_a = 'AM-DSB signal with suppressed carrier'
		choice_b = 'AM-DSB signal with carrier #'
		choice_c = 'AM-DSB signal with carrier'
		choice_d = 'a sequence of exponentially decaying sine waves'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""An arbitrary signal m(t) has zero average value and it is bandlimited to 3.2 kHz. It is sampled at the rate of 8ksamples/s. The samples are passed through an ideal bandpass filter with center frequency of 32 kHz and bandwidth of 6.4 kHz. The output of bandpass filter is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_18():
	def __init__(self):
		
		choice_a = 'provide higher selectivity #'
		choice_b = 'provide higher fidelity'
		choice_c = 'improve linearity'
		choice_d = 'large passband'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The purpose of incorporating a pre-selector stage in a receiver is to """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_20():
	def __init__(self):
		
		choice_a = 'independent of the frequency at which the receiver is tuned'
		choice_b = 'always outside the operating range of the receiver'
		choice_c = 'typical to FM receivers only #'
		choice_d = 'not rejected by the IF tuned circuits'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The image frequency of a superheterodyne receiver is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_21():
	def __init__(self):
		
		choice_a = 'loudspeaker'
		choice_b = 'frequency changer #'
		choice_c = 'demodulator'
		choice_d = 'audio amplifier'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a receiver, which of the following device has RF input but IF output?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_22():
	def __init__(self):
		
		choice_a = 'capacitive coupling'
		choice_b = 'impedance coupling'
		choice_c = 'double-tuned transformer coupling #'
		choice_d = 'single-tuned transformer coupling'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The IF stage of a receiver employs """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_23():
	def __init__(self):
		
		choice_a = 'Mf'
		choice_b = 'Mf / 2'
		choice_c = '2 Mf #'
		choice_d = 'U Mf'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A FM signal with modulation index Mf is passed to a frequency doubler. The wave in the output of the doubler will have a modulation index of """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_24():
	def __init__(self):
		
		choice_a = 'poor sensitivity of RF amplifier'
		choice_b = 'high gain of IF amplifier'
		choice_c = 'inadequate image frequency rejection #'
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Double spotting in a receiver is due to"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_25():
	def __init__(self):
		
		choice_a = 'gang condenser'
		choice_b = 'variable sensivity #'
		choice_c = 'padder capacitor'
		choice_d = 'any of the above'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Three-point-tracking can be achieved with"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_26():
	def __init__(self):
		
		choice_a = 'improve selectivity of the receiver'
		choice_b = 'improve the effectiveness of the AGC'
		choice_c = 'reduce the effect of negative peak clipping #'
		choice_d = 'reduce the effect of noise at all frequencies'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a transistor receiver, the use of FET as the first stage amplifier is likely to """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_2_27():
	def __init__(self):
		
		choice_a = 'synchronous'
		choice_b = 'envelope detector #'
		choice_c = 'radio detector'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The household radio receiver uses"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_2_28():
	def __init__(self):
		
		choice_a = 'solar noise'
		choice_b = 'cosmic noise'
		choice_c = 'galactic noise '
		choice_d = 'atmospheric noise #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following noise sources is different from that of the remaining? """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_29():
	def __init__(self):
		
		choice_a = 'sensitivity'
		choice_b = 'double spotting'
		choice_c = 'blocking #'
		choice_d = 'all of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A receiver having poor IF selectivity will also have poor"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_30():
	def __init__(self):
		
		choice_a = 'True, False'
		choice_b = 'False, True'
		choice_c = 'True, True #'
		choice_d = 'False, False'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""I. Diode is the most common device used for demodulation
II. A discriminator is a FM detector"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_32():
	def __init__(self):
		
		choice_a = 'Fewer tuned circuits'
		choice_b = 'Better linearity'
		choice_c = 'Greater limiting #'
		choice_d = 'Much easier alignment'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following statement about the advantage of phase discriminator over the slope detctor is false?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_33():
	def __init__(self):
		
		choice_a = 'the sensitivity expressed in terms of voltage that must be applied to the receiver to give a standard output'
		choice_b = 'the extent to which the receiver is capable of distinguishing between the desired signal and other frequencies'
		choice_c = 'the variation of the output with the modulation frequency when the output impedance is a resistance #'
		choice_d = 'none of the choice'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Fidelity of a receiver represents"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_34():
	def __init__(self):
		
		choice_a = 'microphone #'
		choice_b = 'demodulator in a superheterodyne receiver'
		choice_c = 'modulator in  a radio transmitter'
		choice_d = 'oscillator in a receiver'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following produces upper and lower side frequencies?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_35():
	def __init__(self):
		
		choice_a = '20 kHz #'
		choice_b = '455 kHz'
		choice_c = '1455 kHz'
		choice_d = 'more than 455 kHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The passband of the tuned circuits of a radio receiver should be equal to """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_36():
	def __init__(self):
		
		choice_a = 'armstrong oscillator #'
		choice_b = 'colpitts oscillator'
		choice_c = 'clapp oscillator'
		choice_d = 'ultra oscillator'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a broadcast superheterodyne receiver having no RF amplifier, the loaded Q of the antenna coupling circuit is 100. If the intermediate frequency is 455 kHz. In receiverse operating up to the limit of shortwave broadcasting the local oscillator often used is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_37():
	def __init__(self):
		
		choice_a = 'better sensitivity'
		choice_b = 'improved signal to noise ratio'
		choice_c = 'better coupling of receiver to the antenna'
		choice_d = 'all of the above #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""RF amplifiers are used in radio receivers for """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_38():
	def __init__(self):
		
		choice_a = 'increases as the modulation index increases'
		choice_b = 'reduces as the modulation index increases'
		choice_c = 'increases as the modulation index decreases #'
		choice_d = 'remains consant when the modulation index decreases #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In an FM signal, the power"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_39():
	def __init__(self):
		
		choice_a = '34 %'
		choice_b = '55.5 %'
		choice_c = '68.8 %'
		choice_d = '84.7 % #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""An unmodulated voltage 10 V effective is applied to a diode detector in which load resistance is 4 x 10^(-5) ohms. A micrometer shows that the rectified DC current in this resistance is 30 A. The efficiency of detection is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_40():
	def __init__(self):
		
		choice_a = 'somewhat bettern when the receiveing frequency is raised'
		choice_b = 'somewhat better at intermediate frequency'
		choice_c = 'somewhat worse when the receiving frequency is lowered '
		choice_d = 'somewhat worse when the receiving frequency is raised #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Selectivity varies with receiving frequency, frequency is raised"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_41():
	def __init__(self):
		
		choice_a = '8 MHz'
		choice_b = '9.9 MHz'
		choice_c = '10.7 MHz #'
		choice_d = '12.2 MHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""FM receivers using the standard 88 to 108 MHz band use IF of"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_42():
	def __init__(self):
		
		choice_a = 'IF stage #'
		choice_b = 'RF stage'
		choice_c = 'power amplification stage'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Most of the amplification of the received signal is obtained in a superheterodyne receiver from the """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_43():
	def __init__(self):
		
		choice_a = 'instability'
		choice_b = 'insufficient adjacent frequency rejection'
		choice_c = 'bandwidth variation'
		choice_d = 'all of the above #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The problem associated with tuned radio frequency receiver is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_44():
	def __init__(self):
		
		choice_a = 'transit-time noise #'
		choice_b = 'shot noise'
		choice_c = 'flicker noise'
		choice_d = 'agitation noise'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following noise becomes of great importanve at high frequencies?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_45():
	def __init__(self):
		
		choice_a = 'AM'
		choice_b = 'FM'
		choice_c = 'SSB'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Superheterodyne receiver can be used in """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_46():
	def __init__(self):
		
		choice_a = 'tracking will be improved #'
		choice_b = 'tracking will be poor'
		choice_c = 'selectivity will be poor'
		choice_d = 'image frequency rejection will be poor'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a receiver, at higher frequencies"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_47():
	def __init__(self):
		
		choice_a = 'phase discriminator #'
		choice_b = 'product detector'
		choice_c = 'balanced modulator'
		choice_d = 'beat frequency oscillator'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following circuit cannot be used to demodulate SSB?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_48():
	def __init__(self):
		
		choice_a = 'improves selectivity'
		choice_b = 'increases tracking problems #'
		choice_c = 'decreases tracking problems'
		choice_d = 'reduces adjacent channel rejection'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""High IF in a superheterodyne receiver"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_radio_receivers_section_2_49():
	def __init__(self):
		
		choice_a = 'cuts off an IF amplifier when the AGC is maximum'
		choice_b = 'cuts off an IF amplifier when the AGC is minimum'
		choice_c = 'cuts off an audio amplifier when the carrier is absent #'
		choice_d = 'eliminates the RF interference when the signal is weak'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The typical squelch circuit """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_radio_receivers_section_2_50():
	def __init__(self):
		
		choice_a = '1.6 kbps'
		choice_b = '16 kbps #'
		choice_c = '32 kbps'
		choice_d = '256 kbps'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A communication channel with additive white Gaussian noise, has a bandwidth of 4 kHz and an SNR of 15. Its channel capacity is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_1():
	def __init__(self):
		
		choice_a = 'duplex arrangement#'
		choice_b = 'half duplex arrangement'
		choice_c = 'both of the valid choices '
		choice_d = 'none of the valid choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		#random.shuffle(choices)
		
		
		self.question = f"""A cordless telephone using separate frequencies for transmission in base and portable units is known as"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_2():
	def __init__(self):
		
		choice_a = 'shunt capacitance #'
		choice_b = 'series capacitance'
		choice_c = 'inductance'
		choice_d = 'resistance'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""For attenuation of high frequencies we should use"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_3():
	def __init__(self):
		
		choice_a = 'up to 100 bps'
		choice_b = 'up to 250 bps'
		choice_c = 'up to 400 bps'
		choice_d = 'up to 600 bps #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A modem is classified as low speed if data rate handled is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_4():
	def __init__(self):
		
		choice_a = 'it reduces the bandwidth requirements to half #'
		choice_b = 'it avoids phase distortion at low frequencies'
		choice_c = 'it results in better reception'
		choice_d = 'none of the valid choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		#random.shuffle(choices)
		
		
		self.question = f"""VSB modulation is preferred in TV because"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_5():
	def __init__(self):
		
		choice_a = 'low pass filter #'
		choice_b = 'high pass filter'
		choice_c = 'band pass filter'
		choice_d = 'band stop filter'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A woofer should be fed from the input through a """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_6():
	def __init__(self):
		
		choice_a = 'frequency adjustment'
		choice_b = 'frequency interleaving #'
		choice_c = 'frequency changing'
		choice_d = 'frequency amalgamation'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The color subcarrier and sidebands produced by its modulation with the chrominance signals are accomodated in the standard channel with by the process of"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_7():
	def __init__(self):
		
		choice_a = 'mf'
		choice_b = '3 mf #'
		choice_c = 'mf / 3'
		choice_d = 'mf / 9'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In FM signal with a modulation index of (mf) is passed through a frequency tripler. The wave in the output of the tripler will have a modulation index of"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_8():
	def __init__(self):
		
		choice_a = 'detection'
		choice_b = 'rectification'
		choice_c = 'tuning #'
		choice_d = 'detection and rectification'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In color TV receiver, varactor diodes are used for"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_9():
	def __init__(self):
		
		choice_a = '3 #'
		choice_b = '2'
		choice_c = '1'
		choice_d = '4'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The number of noise sources in a BJT is(are)"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_10():
	def __init__(self):
		
		choice_a = 'does not depend on frequency'
		choice_b = 'decreases as frequency is increased #'
		choice_c = 'increases as frequency is increased'
		choice_d = 'depends on temperature'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Energy content of atmospheric noise """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_11():
	def __init__(self):
		
		choice_a = '400 W'
		choice_b = '512 W #'
		choice_c = '588 W'
		choice_d = '650 W'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A 400 W carrier is amplitude modulated with m = 0.75. The total power in AM is """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_12():
	def __init__(self):
		
		choice_a = '5 J_4(3)'
		choice_b = '2.5 J_8(3)'
		choice_c = '2.5 J_8(4)'
		choice_d = '5 J_4(6) #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""c(t) and m(t) are used to generate an FM signal. If the peak frequency deviation of the generated FM signal is three times the transmission bandwidth of the AM signal, then the coefficient of the term [2pi (1008 x 10^3 t)] in the FM signal (in terms of Bessel coefficients) is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_13():
	def __init__(self):
		
		choice_a = 'PSK #'
		choice_b = 'ASK'
		choice_c = 'FSK'
		choice_d = 'PSK and FSK'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Non-coherent detection is not possible for"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_14():
	def __init__(self):
		
		choice_a = 'high transmitting power'
		choice_b = 'very sensitive antenna'
		choice_c = 'fully steerable antenna'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		#random.shuffle(choices)
		
		
		self.question = f"""Tracking of extra-terrestrial objects require"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_15():
	def __init__(self):
		
		choice_a = 'Both A and R are correct and R is a correct explanation of A #'
		choice_b = 'Both A and R are correct but R is not a correct explanation of A'
		choice_c = 'A is correct but R is wrong'
		choice_d = 'A is wrong but R is correct'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Assertion: Free space does not interfere with normal radiation and propagation of radio waves.
Reason: Free space has no magnetic or gravitational fields."""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_16():
	def __init__(self):
		
		choice_a = 'Power Return Factor'
		choice_b = 'Pulse Return Factor'
		choice_c = 'Pulse Repetition Factor #'
		choice_d = 'Pulse Response Factor'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In radar systems PRF stands for"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_17():
	def __init__(self):
		
		choice_a = 'x(t) = 2 cos(t) + 3 cos(3t)'
		choice_b = 'x(t) = 2 cos(pi t) + 7 cos(t)'
		choice_c = 'x(t) = cos(t) + 0.5 #'
		choice_d = 'x(t) = 2 cos(1.5 pi t) + sin(3.5 pi t)'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following cannot be the Fourier series expansion of a periodic signal?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_18():
	def __init__(self):
		
		choice_a = 'reactance bipolar transistor modulator'
		choice_b = 'armstrong modulator #'
		choice_c = 'varactor diode modulator'
		choice_d = 'reactance FM modulator'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following is the indirect way of FM generation?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_19():
	def __init__(self):
		
		choice_a = '0.9'
		choice_b = '10 / 9 #'
		choice_c = '0.81'
		choice_d = '0.1'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A telephone exchange has 9000 subscribers. If the number of calls originating at peak time is 10,000 in one hour, the calling rate is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_20():
	def __init__(self):
		
		choice_a = 'C = B log_2 (1 + S/N) #'
		choice_b = 'C = 2 B log_2 (1 + S/N)'
		choice_c = 'C = log_2 (1 + S/N)'
		choice_d = 'C = B log_10 (1 + S/N)'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""If C is the capacity of a noisy channel in bits/second, B is the bandwidth in Hz, and S/N is the signal to noise ratio, then"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_21():
	def __init__(self):
		
		choice_a = 'decreases'
		choice_b = 'increases #'
		choice_c = 'remains the same'
		choice_d = 'decreases or remains the same'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""As the frequency increases, the absorption of ground wave by earth's surface """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_22():
	def __init__(self):
		
		choice_a = 'is constant at all temperature'
		choice_b = 'varies directly as temperature'
		choice_c = 'varies inversely as the absolute temperature'
		choice_d = 'varies directly as the square root of absolute temperature #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The velocity of sound waves in air"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_23():
	def __init__(self):
		
		choice_a = '1000 m'
		choice_b = '500 m'
		choice_c = '100 m #'
		choice_d = '10 m'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The range of a cordless phone is about"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_24():
	def __init__(self):
		
		choice_a = 'one or two radials extending from base of tower at a depth of about 5 cm below the ground'
		choice_b = 'a large number of radials extending from base of tower at a depth of about 3 m'
		choice_c = 'a large number of radials extending from base of tower at a depth of about 30 cm #'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		r#andom.shuffle(choices)
		
		
		self.question = f"""An earth mat for a communication tower consists of """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_25():
	def __init__(self):
		
		choice_a = 'Adding magnetism in mask and mounting frame'
		choice_b = 'Removing residual magnetism in mask, sheild, etc. #'
		choice_c = 'Increasing resistance of coils to decrease time constant'
		choice_d = 'Decreasing resistance of coils to increase time constant'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Degaussing in a picture tube means"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_26():
	def __init__(self):
		
		choice_a = 'carrier frequency'
		choice_b = 'bandwidth #'
		choice_c = 'transmission loss'
		choice_d = 'transmitted power'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""The rate at which information can be carried through a communication channel depends on """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_27():
	def __init__(self):
		
		choice_a = 'shunt traps'
		choice_b = 'series traps'
		choice_c = 'absorption traps'
		choice_d = 'all of the choices #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		#random.shuffle(choices)
		
		
		self.question = f"""Some types of traps used in video IF amplifier of color TV are"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_28():
	def __init__(self):
		
		choice_a = '-'
		choice_b = '-'
		choice_c = '-'
		choice_d = '-'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""-"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_29():
	def __init__(self):
		
		choice_a = '0.1'
		choice_b = '0.7'
		choice_c = '0.5 #'
		choice_d = '0.35'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A carrier is simultaneously modulated by two sine waves having modulation indices of 0.4 and 0.3. The total modulation index would be"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_30():
	def __init__(self):
		
		choice_a = '1002 kHz'
		choice_b = '1000 kHz #'
		choice_c = '999.2 kHz'
		choice_d = '998.0 kHz'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""A 1000 kHz carrier is simultaneously modulated with 300 Hz, 800 Hz and 2 kHz audio sine waves. Which of the following frequencies is least likely to be present in the output?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_31():
	def __init__(self):
		
		choice_a = 'voltage and current nodes coincide'
		choice_b = 'voltage and current antinodes coincide'
		choice_c = 'voltage nodes and current antinodes as well as current nodes and voltage antinodes coincide #'
		choice_d = 'both (a) and (b)'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		#random.shuffle(choices)
		
		
		self.question = f"""In the standing wave pattern on a transmission line"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_32():
	def __init__(self):
		
		choice_a = '2'
		choice_b = '3'
		choice_c = '4 #'
		choice_d = '6'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""If the bandwidth is increased by 2, the gamma(fm) gamma(am) ( where gamma is the ratio of SNR of output to SNR at input, FM is frequency modulation and AM is amplitude modulation)) is increased by a factor of"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_33():
	def __init__(self):
		
		choice_a = '(a sin(2pi t)) / t '
		choice_b = '(sin(2pit) / t) + (sin(pit)/t) cos(3pit)'
		choice_c = '(sin(2pit) / t) + (sin(0.5pit) / t) cos(1/5 pi t) #'
		choice_d = '(sin(2pit)/t) + (sin(pit) / t) cos(0.75 pi t)'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In the figure, m(t) = (2 sin(2pit)) / t,  s(t) = cos (200 pi t) and n(t) = (sin (199pi t) / t), the output y(t) will be https://lesliecaminadecom.files.wordpress.com/2020/03/534-934-1.png"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_34():
	def __init__(self):
		
		choice_a = '-'
		choice_b = '-'
		choice_c = '-'
		choice_d = '-'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""-"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_35():
	def __init__(self):
		
		choice_a = 'telegraphy #'
		choice_b = 'telephony'
		choice_c = 'satellite communication'
		choice_d = 'radio transmission'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Frequency shift keying is used mostly in """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_36():
	def __init__(self):
		
		choice_a = 'to use a balun'
		choice_b = 'to use a single stub of adjustable position'
		choice_c = 'to use a double stub #'
		choice_d = 'to use a brodband amplifier'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""It is desired that transmission line and load should match for a range of frequencies. The best method is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_communication_systems_section_1_37():
	def __init__(self):
		
		choice_a = 'CE'
		choice_b = 'CB'
		choice_c = 'CC #'
		choice_d = 'push pull'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following has the highest input impedance?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_38():
	def __init__(self):
		
		choice_a = '1.92 ms #'
		choice_b = '2.08 ms'
		choice_c = '50 ms'
		choice_d = '0.08 ms'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In a facsimile reproduction time to scan one line is 2 ms. If it has 4% blanking, the visible trace time is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_39():
	def __init__(self):
		
		choice_a = 'I, II, III, IV'
		choice_b = 'I, II, II #'
		choice_c = 'II, III, IV'
		choice_d = 'I, III, IV'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Consider the following statements
I. The amplitude of an FM wave is constant
II. FM is more immune to noise than AM
II. FM broadcasts operate in upper VHF and UHF frequency types
IV. FM transmitting and receiving equipments are simpler as compared to AM transmitter and receiving equipments.
Which of the statement above are correct?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_40():
	def __init__(self):
		
		choice_a = '0.5 Pa'
		choice_b = '0.2 Pa'
		choice_c = '0.1 Pa #'
		choice_d = '0.01 Pa'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Signal to noise ratio of microphone is defined as the ratio of output when the sound pressure is _____ to the output in the absence of any sound signal"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_41():
	def __init__(self):
		
		choice_a = 'ZL = ZO'
		choice_b = 'ZL < ZO'
		choice_c = 'ZL > ZO'
		choice_d = 'both (b) and (c) #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		#random.shuffle(choices)
		
		
		self.question = f"""A generator is feeding power to a transmission line of characteristic impedance Zo. The line is terminated in impedance ZL. Standing waves will be setup if"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_42():
	def __init__(self):
		
		choice_a = '-'
		choice_b = '-'
		choice_c = '-'
		choice_d = '-'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""-"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_43():
	def __init__(self):
		
		choice_a = '-'
		choice_b = '-'
		choice_c = '-'
		choice_d = '-'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""-"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_44():
	def __init__(self):
		
		choice_a = 'amplitude modulation'
		choice_b = 'frequency modulation #'
		choice_c = 'both amplitude modulation and frequency modulation'
		choice_d = 'neither amplitude modulation nor frequency modulation'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Radio broadcasts are generally"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_45():
	def __init__(self):
		
		choice_a = '20 seconds'
		choice_b = '2 seconds'
		choice_c = '0.2 seconds'
		choice_d = '0.05 seconds #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""If the frequency of a wave is 20 Hz, the time period is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_46():
	def __init__(self):
		
		choice_a = 'half wave dipole'
		choice_b = 'elementary doublet'
		choice_c = 'isotropic #'
		choice_d = 'infinitesimal dipole'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which of the following is taken as referene antenna for directive gain?"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_47():
	def __init__(self):
		
		choice_a = 'voltage amplifier'
		choice_b = 'current amplifier'
		choice_c = 'power amplifier #	'
		choice_d = 'none of the choices'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Push-pull amplifier is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_48():
	def __init__(self):
		
		choice_a = '1 and 1'
		choice_b = '1 and 0.5'
		choice_c = '0.5 and 1'
		choice_d = '0 and 1 #'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""When the channel is noisy, producing a conditional probability of error p = 0.5,the channel capacity and entropy function would be, respectively,"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_49():
	def __init__(self):
		
		choice_a = '64 us #'
		choice_b = '6.4 us'
		choice_c = '640 us'
		choice_d = '0.64 us'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""In CCIR - B system, the time between start of one Hsync pulse and next is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_1_50():
	def __init__(self):
		
		choice_a = 'high resistivity #'
		choice_b = 'low resistivity'
		choice_c = 'medium resistivity'
		choice_d = 'both low and medium resistivity'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Counterpoise is used in coils having """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""


class ece_communication_systems_section_2_1():
	def __init__(self):
		
		choice_a = '3 #'
		choice_b = '1.5'
		choice_c = '4'
		choice_d = '2'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""For an ideal 3000 Hz channel, S/N ratio is"""
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""

class ece_communication_systems_section_2_2():
	def __init__(self):
		
		choice_a = 'choice1'
		choice_b = 'choice2'
		choice_c = 'choice3'
		choice_d = 'choice4'
		
		choices = [choice_a, choice_b, choice_c, choice_d]
		random.shuffle(choices)
		
		
		self.question = f"""Which """
		self.answer = f"""A. {choices[0]}
B. {choices[1]}
C. {choices[2]}
D. {choices[3]}"""